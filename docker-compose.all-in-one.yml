# All-in-one Docker Compose file for BlockPanel
# Combines base, production, port range exposure, and optional services.
# Usage examples:
#   Basic:          docker compose -f docker-compose.all-in-one.yml up -d
#   With prewarm:   docker compose -f docker-compose.all-in-one.yml --profile prewarm up -d
#   Recreate:       docker compose -f docker-compose.all-in-one.yml up -d --force-recreate
# Customize via environment variables (export or use an .env file). Key vars below have sensible defaults.

services:
  controller:
    image: ${BLOCKPANEL_IMAGE:-moresonsun/blockypanel}:${BLOCKPANEL_TAG:-latest}
    container_name: blockpanel
    build:
      context: .
      dockerfile: docker/controller.Dockerfile
    # Expose the API/UI internally to nginx and optionally to host (keep 8000 commented if using nginx only)
    ports:
      - "8000:8000"  # Comment out if you only want nginx (80/443) exposed
    environment:
      - APP_NAME=BlockPanel
      - APP_VERSION=${BLOCKPANEL_TAG:-v0.3.2}
      - SERVERS_CONTAINER_ROOT=/data/servers
      - SERVERS_VOLUME_NAME=minecraft-controller_mc_servers_data
      - DOCKER_HOST=unix:///var/run/docker.sock
      - USE_POSTGRES=true
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres123}@db:5432/minecraft_controller
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY:-change-me-please-min-32-chars-long-blockpanel}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - mc_servers_data:/data/servers
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/quick"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - blockpanel_net

  db:
    image: postgres:15-alpine
    container_name: mc-postgres
    environment:
      - POSTGRES_DB=minecraft_controller
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backup:/backup
    # Uncomment to expose Postgres externally (not recommended in production)
    # ports:
    #   - "5432:5432"
    restart: unless-stopped
    networks:
      - blockpanel_net

  redis:
    image: redis:7-alpine
    container_name: mc-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - blockpanel_net
    # Optional resource hints
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  nginx:
    image: nginx:alpine
    container_name: mc-nginx
    depends_on:
      - controller
    ports:
      - "80:80"
      - "443:443"  # Requires mounted certs in ./ssl
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
      - static_files:/var/www/static:ro
    restart: unless-stopped
    networks:
      - blockpanel_net

  runtime_prewarm:
    image: ${BLOCKPANEL_RUNTIME_IMAGE:-moresonsun/blockypanel-runtime}:${BLOCKPANEL_TAG:-latest}
    container_name: blockpanel-runtime-prewarm
    command: ["true"]
    build:
      context: .
      dockerfile: docker/runtime.Dockerfile
    restart: "no"
    profiles: [prewarm]
    networks:
      - blockpanel_net
    # Pulls runtime image in advance so first modded server init is faster.

  # Reserve the full port range for future Minecraft server containers
  port_reserver:
    image: alpine:3.20
    container_name: mc-port-reserver
    command: ["/bin/sh", "-c", "while true; do sleep 3600; done"]
    ports:
      - "25500-25600:25500-25600"
    restart: unless-stopped
    networks:
      - blockpanel_net

networks:
  blockpanel_net:
    name: minecraft_controller_network
    driver: bridge

volumes:
  mc_servers_data:
  postgres_data:
  postgres_backup:
    name: minecraft-controller_postgres_backup
  static_files:
    name: minecraft-controller_static_files
  redis_data:
    name: minecraft-controller_redis_data
