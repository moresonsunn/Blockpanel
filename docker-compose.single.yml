# Single-container BlockPanel deployment (similar to Crafty style)
# Uses internal SQLite DB and no external dependencies.
# Run: docker compose -f docker-compose.single.yml up -d

services:
  blockpanel:
    image: ${BLOCKPANEL_IMAGE:-moresonsun/blockypanel}:${BLOCKPANEL_TAG:-latest}
    container_name: blockpanel
    # Comment build section if pulling pre-built image only.
    build:
      context: .
      dockerfile: docker/controller.Dockerfile
    ports:
      - "8000:8000"
      # Optional pre-reserved range if you want direct static port mapping for servers (controller dynamically creates containers)
      # - "25500-25600:25500-25600"
    environment:
      - APP_NAME=BlockPanel
      - APP_VERSION=${BLOCKPANEL_TAG:-v0.3.2}
      - USE_POSTGRES=false
      - DATABASE_URL=sqlite:///./minecraft_controller.db
      - SERVERS_CONTAINER_ROOT=/data/servers
      - SERVERS_VOLUME_NAME=minecraft-controller_mc_servers_data
      - DOCKER_HOST=unix:///var/run/docker.sock
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY:-change-me-single-container-secret}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - mc_servers_data:/data/servers
      - /var/run/docker.sock:/var/run/docker.sock
      # Persist SQLite file by binding the work directory db file out if desired:
      - sqlite_data:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/quick"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  mc_servers_data:
  sqlite_data:
