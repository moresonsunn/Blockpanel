###############################################
# BlockPanel Recommended Deployment (Compose) #
###############################################
# Usage:
# 1. Copy .env.example to .env and adjust secrets (SECRET_KEY, POSTGRES_PASSWORD, etc.)
# 2. (Optional) Pin BLOCKPANEL_TAG to a specific release (e.g. v0.0.3) instead of 'latest'
# 3. Start: docker compose -f docker-compose.recommended.yml up -d
# 4. Upgrade: change BLOCKPANEL_TAG, then docker compose pull && docker compose up -d
#
# Notes:
# - Controller dynamically starts per-server containers using the runtime image.
# - Healthchecks ensure ordered startup (DB before controller readiness considered healthy).
# - All tunable values come from .env to reduce edits to this file.

services:
  controller:
    image: ${BLOCKPANEL_IMAGE:-blockypanel/blockpanel}:${BLOCKPANEL_TAG:-latest}
    container_name: blockpanel
    env_file:
      - .env
    environment:
      # Force (or override) version metadata if desired; otherwise image label used.
      APP_VERSION: "${APP_VERSION:-dev}"
      APP_NAME: "${APP_NAME:-BlockPanel}"
      SERVERS_CONTAINER_ROOT: /data/servers
      SERVERS_VOLUME_NAME: "${SERVERS_VOLUME_NAME:-minecraft-controller_mc_servers_data}"
      DOCKER_HOST: "${DOCKER_HOST:-unix:///var/run/docker.sock}"
      USE_POSTGRES: "${USE_POSTGRES:-true}"
      DATABASE_URL: "${DATABASE_URL}"
      TZ: "${TIMEZONE:-UTC}"
    ports:
      - "${HOST_PORT:-8000}:8000"
    volumes:
      - mc_servers_data:/data/servers
      - ./backups:/data/backups
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:8000/health/quick"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s
    depends_on:
      db:
        condition: service_healthy
      runtime_prewarm:
        condition: service_completed_successfully
    restart: unless-stopped
    networks:
      - internal
      - public

  db:
    image: postgres:15-alpine
    container_name: mc-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - internal

  runtime_prewarm:
    image: ${BLOCKPANEL_RUNTIME_IMAGE:-blockypanel/blockpanel-runtime}:${BLOCKPANEL_TAG:-latest}
    container_name: blockpanel-runtime-prewarm
    command: ["true"]
    restart: "no"
    networks:
      - internal
    # You can disable this service by setting DISABLE_RUNTIME_PREWARM=true in .env and
    # then using an override file or removing the dependency above.

  # Optional reverse proxy example (uncomment and adjust certificates for production)
  # nginx:
  #   image: nginx:alpine
  #   container_name: blockpanel-nginx
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/ssl:ro
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   depends_on:
  #     - controller
  #   restart: unless-stopped
  #   networks:
  #     - public
  #     - internal

networks:
  internal:
    driver: bridge
  public:
    driver: bridge

volumes:
  mc_servers_data:
  postgres_data:
