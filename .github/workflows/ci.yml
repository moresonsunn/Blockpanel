name: CI/CD Pipeline

# Required for uploading Trivy SARIF (security-events) and creating releases (contents)
permissions:
  contents: write
  security-events: write
  actions: read

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: minecraft_controller_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
    
    - name: Run syntax checks
      run: |
        cd backend
        python -m py_compile *.py
        
    - name: Run comprehensive tests
      run: python test_complete_system.py
      env:
        DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/minecraft_controller_test
        USE_POSTGRES: true

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd frontend
        if [ -f package-lock.json ]; then
          echo "Using npm ci (lockfile present)"
          npm ci
        else
          echo "package-lock.json not found - using npm install"
          npm install --no-audit --no-fund
        fi
    
    - name: Run build test
      run: |
        cd frontend
        npm run build
    - name: Production dependency audit (fail on high/critical only)
      run: |
        cd frontend
        # Fail pipeline only if HIGH or CRITICAL vulns exist (moderate allowed for now)
        npm audit --omit=dev --audit-level=high || { echo "High/Critical vulnerabilities detected"; exit 1; }
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    env:
      HAS_DOCKER_CREDS: ${{ secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub (if credentials available)
      if: env.HAS_DOCKER_CREDS == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Prepare image meta
      id: meta
      run: |
        SHORT_SHA="${GITHUB_SHA::7}"
        DATE_TAG="$(date -u +%Y%m%d)"
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION_TAG="${GITHUB_REF##*/}"
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "version_tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "version_tag=" >> $GITHUB_OUTPUT
          fi
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "date_tag=${DATE_TAG}" >> $GITHUB_OUTPUT
        # Canonical app version we will bake into images (tag when release, else short SHA)
        if [[ -n "${VERSION_TAG}" ]]; then
          APP_VERSION="${VERSION_TAG}"
        else
          APP_VERSION="${SHORT_SHA}"
        fi
        echo "app_version=${APP_VERSION}" >> $GITHUB_OUTPUT
        # Decide whether to push (need creds; skip external PRs)
        if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]]; then
          SHOULD_PUSH=false
          PUSH_REASON="external pull request"
        else
          if [[ -n "${{ secrets.DOCKERHUB_TOKEN }}" && ( -n "${{ secrets.DOCKERHUB_NAMESPACE }}" || -n "${{ secrets.DOCKERHUB_USERNAME }}" ) ]]; then
            SHOULD_PUSH=true
            PUSH_REASON="credentials present"
          else
            SHOULD_PUSH=false
            PUSH_REASON="missing creds (DOCKERHUB_TOKEN / NAMESPACE or USERNAME)"
          fi
        fi
        echo "push_images=${SHOULD_PUSH}" >> $GITHUB_OUTPUT
        # Image prefix preference: DOCKERHUB_NAMESPACE (org) > DOCKERHUB_USERNAME > local
        if [[ -n "${{ secrets.DOCKERHUB_NAMESPACE }}" ]]; then
          IMAGE_PREFIX="${{ secrets.DOCKERHUB_NAMESPACE }}"
        elif [[ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]]; then
          IMAGE_PREFIX="${{ secrets.DOCKERHUB_USERNAME }}"
        else
          IMAGE_PREFIX="local"
        fi
        echo "image_prefix=${IMAGE_PREFIX}" >> $GITHUB_OUTPUT
        # Release tag markers (only meaningful if pushing & release & not local)
        if [[ "${SHOULD_PUSH}" == "true" && "${IMAGE_PREFIX}" != "local" && -n "${VERSION_TAG}" ]]; then
          echo "include_release_tag=true" >> $GITHUB_OUTPUT
        else
          echo "include_release_tag=false" >> $GITHUB_OUTPUT
        fi
        echo "Meta summary -> push_images=${SHOULD_PUSH} (${PUSH_REASON}); image_prefix=${IMAGE_PREFIX}; app_version=${APP_VERSION}" 

    - name: Fail if release tag but cannot push images
      if: steps.meta.outputs.is_release == 'true' && steps.meta.outputs.push_images == 'false'
      run: |
        echo "ERROR: This is a release tag but Docker Hub credentials are missing."
        echo "Add DOCKERHUB_USERNAME + DOCKERHUB_TOKEN (and optionally DOCKERHUB_NAMESPACE) as GitHub Action secrets."
        exit 1
    
    - name: Build runtime image (multi-arch)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/runtime.Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ steps.meta.outputs.push_images == 'true' }}
        tags: |
          ${{ steps.meta.outputs.image_prefix }}/blockpanel-runtime:latest
          ${{ steps.meta.outputs.image_prefix }}/blockpanel-runtime:${{ steps.meta.outputs.short_sha }}
          ${{ steps.meta.outputs.image_prefix }}/blockpanel-runtime:${{ steps.meta.outputs.date_tag }}
          ${{ steps.meta.outputs.include_release_tag == 'true' && format('{0}/blockpanel-runtime:{1}', steps.meta.outputs.image_prefix, steps.meta.outputs.version_tag) || '' }}
        build-args: |
          APP_VERSION=${{ steps.meta.outputs.app_version }}
          GIT_COMMIT=${{ github.sha }}
        cache-from: type=gha,scope=runtime
        cache-to: type=gha,scope=runtime,mode=max

    - name: Build controller image (multi-arch)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/controller.Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ steps.meta.outputs.push_images == 'true' }}
        tags: |
          ${{ steps.meta.outputs.image_prefix }}/blockpanel:latest
          ${{ steps.meta.outputs.image_prefix }}/blockpanel:${{ steps.meta.outputs.short_sha }}
          ${{ steps.meta.outputs.image_prefix }}/blockpanel:${{ steps.meta.outputs.date_tag }}
          ${{ steps.meta.outputs.include_release_tag == 'true' && format('{0}/blockpanel:{1}', steps.meta.outputs.image_prefix, steps.meta.outputs.version_tag) || '' }}
        build-args: |
          APP_VERSION=${{ steps.meta.outputs.app_version }}
          GIT_COMMIT=${{ github.sha }}
        cache-from: type=gha,scope=controller
        cache-to: type=gha,scope=controller,mode=max

    - name: Test Docker Compose configuration (uses newly built local tags)
      run: |
        sed -i "s#mc-controller:latest#${{ secrets.DOCKERHUB_USERNAME }}/blockpanel:latest#g" docker-compose.yml || true
        sed -i "s#mc-runtime:latest#${{ secrets.DOCKERHUB_USERNAME }}/blockpanel-runtime:latest#g" docker-compose.yml || true
        docker compose config

    - name: Run Docker integration test
      run: |
        docker compose up -d
        # Wait briefly for health
        sleep 35
        set -e
        curl -f http://localhost:8000/health || curl -f http://localhost:8000/healthz || true
        docker compose down -v

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      if: github.event_name == 'push'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: (Placeholder) Production deployment
      run: |
        echo "Images already pushed:"
        echo "  ${{ secrets.DOCKERHUB_USERNAME }}/blockpanel:latest"
        echo "  ${{ secrets.DOCKERHUB_USERNAME }}/blockpanel-runtime:latest"
        echo "Implement infra-specific rollout here (e.g., ssh to host and run docker compose pull && up -d)."

  release-assets:
    name: Publish Release Assets
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [docker-build, image-security-scan]
    steps:
      - uses: actions/checkout@v4
      - name: Generate CasaOS manifests from templates
        shell: pwsh
        run: |
          $version = "$(${Env:GITHUB_REF}.Split('/')[-1])"
          ./scripts/update-casaos-version.ps1 -Version $version
      - name: Install Syft (SBOM generator)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
      - name: Generate SBOMs
        run: |
          set -e
          VERSION="${GITHUB_REF##*/}"
          IMAGE_PREFIX="${{ secrets.DOCKERHUB_NAMESPACE }}"
          if [ -z "$IMAGE_PREFIX" ]; then IMAGE_PREFIX="${{ secrets.DOCKERHUB_USERNAME }}"; fi
          # Source (repo) SBOM
          syft dir:. -o spdx-json=sbom-source.spdx.json || true
          # Image SBOMs (ignore failures if images are private/unavailable yet)
          syft "$IMAGE_PREFIX/blockpanel:$VERSION" -o spdx-json=sbom-image-controller.spdx.json || true
          syft "$IMAGE_PREFIX/blockpanel-runtime:$VERSION" -o spdx-json=sbom-image-runtime.spdx.json || true
      - name: Generate checksums
        run: |
          sha256sum docker-compose.yml > checksums.txt
          echo "Version: ${GITHUB_REF##*/}" >> checksums.txt
      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            docker-compose.yml
            install.sh
            install.ps1
            distributions/casaos/app.json
            distributions/casaos/apps.json
            sbom-source.spdx.json
            sbom-image-controller.spdx.json
            sbom-image-runtime.spdx.json
            checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  image-security-scan:
    name: Image Vulnerability Scan
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [docker-build]
    steps:
      - name: Determine image prefix
        id: meta
        run: |
          if [ -n "${{ secrets.DOCKERHUB_NAMESPACE }}" ]; then echo "prefix=${{ secrets.DOCKERHUB_NAMESPACE }}" >> $GITHUB_OUTPUT; \
          elif [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then echo "prefix=${{ secrets.DOCKERHUB_USERNAME }}" >> $GITHUB_OUTPUT; \
          else echo "prefix=moresonsun" >> $GITHUB_OUTPUT; fi
      - name: Set up Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: '${{ steps.meta.outputs.prefix }}/blockpanel:${{ github.ref_name }}'
          format: 'table'
          exit-code: '0'
      - name: Scan controller image (fail on HIGH/CRITICAL)
        run: |
          VERSION=${GITHUB_REF##*/}
          IMAGE_PREFIX='${{ steps.meta.outputs.prefix }}'
          trivy image --severity HIGH,CRITICAL --exit-code 1 "$IMAGE_PREFIX/blockpanel:$VERSION" || {
            echo 'Controller image has HIGH/CRITICAL vulnerabilities.'
            exit 1
          }
      - name: Scan runtime image (fail on HIGH/CRITICAL)
        run: |
          VERSION=${GITHUB_REF##*/}
          IMAGE_PREFIX='${{ steps.meta.outputs.prefix }}'
          trivy image --severity HIGH,CRITICAL --exit-code 1 "$IMAGE_PREFIX/blockpanel-runtime:$VERSION" || {
            echo 'Runtime image has HIGH/CRITICAL vulnerabilities.'
            exit 1
          }
